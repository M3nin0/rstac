% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ext_filter.R
\name{ext_filter}
\alias{ext_filter}
\title{Filter extension}
\usage{
ext_filter(q, expr, lang = NULL, crs = NULL)
}
\arguments{
\item{q}{a \code{RSTACQuery} object expressing a STAC query
criteria.}

\item{expr}{a valid R expression following the filters supported by the
CQL2 predicates.}

\item{lang}{a character with the syntax used in the filter.
It can be used in text format \code{cql2-text} or in JSON format
\code{cql2-json}. By default, \code{cql2-text} is used in \code{GET}
requests and \code{cql2-json} in \code{POST} requests.}

\item{crs}{a character with coordinate reference systems.
By default WGS84 is used, this parameter will rarely be used.}
}
\value{
A \code{RSTACQuery} object  with the subclass \code{ext_filter} containing
all request parameters to be passed to \code{get_request()} or
\code{post_request()} function.
}
\description{
The filter extension expands the capabilities of the \code{/search} endpoint
providing an expressive query language to construct more complex filter
predicates. These filters are designed following the Common Query Language
(CQL2). CQL2 supports filter predicates for standard data types like strings,
numbers and boolean as well as for spatial geometries
(point, lines, polygons) and temporal geometries (instants and intervals).

Standard comparison operators in rstac:
\itemize{
\item \code{==} corresponds to \code{=}
\item \code{>} corresponds to \code{>}
\item \code{>=} corresponds to \code{>=}
\item \code{<} corresponds to \code{<}
\item \code{<=} corresponds to \code{<=}
\item \code{is_null} corresponds to \code{IS NOT NULL}
}

Advanced operators in rstac:
\itemize{
\item \code{\%like\%} corresponds to \code{LIKE}
\item \code{between()} corresponds to \code{BETWEEN}
\item \code{\%in\%} corresponds to \code{IN}
}

Spatial operators in rstac:
\itemize{
\item \code{s_intersects} corresponds to \code{S_INTERSECTS}
\item \code{s_touches} corresponds to \code{S_TOUCHES}
\item \code{s_within} corresponds to \code{S_WITHIN}
\item \code{s_overlaps} corresponds to \code{S_OVERLAPS}
\item \code{s_crosses} corresponds to \code{S_CROSSES}
\item \code{s_contains} corresponds to \code{S_CONTAINS}
}

Temporal operators in rstac:
\itemize{
\item \code{t_after} corresponds to \code{T_AFTER}
\item \code{t_before} corresponds to \code{T_BEFORE}
\item \code{t_contains} corresponds to \code{T_CONTAINS}
\item \code{t_disjoint} corresponds to \code{T_DISJOINT}
\item \code{t_during} corresponds to \code{T_DURING}
\item \code{t_equals} corresponds to \code{T_EQUALS}
\item \code{t_finishedby} corresponds to \code{T_FINISHEDBY}
\item \code{t_finishes} corresponds to \code{T_FINISHES}
\item \code{t_intersects} corresponds to \code{T_INTERSECTS}
\item \code{t_meets} corresponds to \code{T_MEETS}
\item \code{t_meet} corresponds to \code{T_MEET}
\item \code{t_metby} corresponds to \code{T_METBY}
\item \code{t_overlappedby} corresponds to \code{T_OVERLAPPEDBY}
\item \code{t_overlaps} corresponds to \code{T_OVERLAPS}
\item \code{t_startedby} corresponds to \code{T_STARTEDBY}
\item \code{t_starts} corresponds to \code{T_STARTS}
}

Array Operators in rstac:
\itemize{
\item \code{a_equals} corresponds to \code{A_EQUALS}
\item \code{a_contains} corresponds to \code{A_CONTAINS}
\item \code{a_containedby} corresponds to \code{A_CONTAINEDBY}
\item \code{a_overlaps} corresponds to \code{A_OVERLAPS}
}
}
\examples{
\donttest{
# Standard comparison operators in rstac:
# Creating a stac search query
req <- rstac::stac("https://planetarycomputer.microsoft.com/api/stac/v1") \%>\%
  rstac::stac_search(limit = 5)

# Equal operator '=' with collection property
req \%>\% ext_filter(collection == "sentinel-2-l2a") \%>\% post_request()

# Not equal operator '!=' with collection property
req \%>\% ext_filter(collection != "sentinel-2-l2a") \%>\% post_request()

# Less than operator '<' with cloud_cover property
req \%>\% ext_filter(`eo:cloud_cover` < 10) \%>\% post_request()

# Greater than operator '>' with vegetation_percentage property
req \%>\% ext_filter(`s2:vegetation_percentage` > 50) \%>\% post_request()

# Less than or equal operator '<=' with datetime property
req \%>\% ext_filter(datetime <= "1986-01-01") \%>\% post_request()

# Greater than or equal '>=' with AND operator
req \%>\% ext_filter(collection == "sentinel-2-l2a"   &&
                   `s2:vegetation_percentage` >= 50 &&
                   `eo:cloud_cover` <= 10) \%>\% post_request()
# Advanced comparison operators
# 'LIKE' operator
req \%>\% ext_filter(collection \%like\% "modis\%") \%>\% post_request()

# 'IN' operator
req \%>\% ext_filter(collection \%in\% c("modis-64A1-061",
                                     "landsat-c2-l2",
                                     "sentinel-2-l2a") &&
                   datetime == "2019-01-01") \%>\%
  post_request()

# Spatial operator
# Lets create a polygon with sf package
polygon <- sf::st_polygon(
  list(
    matrix(c(-62.34499836, -8.57414572,
             -62.18858174, -8.57414572,
             -62.18858174, -8.15351185,
             -62.34499836, -8.15351185,
             -62.34499836, -8.57414572),
           ncol = 2, byrow = TRUE)
  )
)
# 'S_INTERSECTS' spatial operator with polygon and geometry property
req \%>\% ext_filter(collection == "sentinel-2-l2a" &&
                   s_intersects(geometry, {{polygon}})) \%>\% post_request()

# 'S_CONTAINS' spatial operator with point and geometry property
point <- sf::st_point(c(-62.45792211, -8.61158488))
req \%>\% ext_filter(collection == "landsat-c2-l2" &&
                   s_contains(geometry, {{point}})) \%>\% post_request()

# 'S_CROSSES' spatial operator with linestring and geometry property
linestring <- sf::st_linestring(
  matrix(c(-62.55735320, -8.43329465,
           -62.21791603, -8.36815014),
         ncol = 2, byrow = TRUE)
)
req \%>\% ext_filter(collection == "landsat-c2-l2" &&
                   s_crosses(geometry, {{linestring}})) \%>\% post_request()

# Temporal operator
# 'T_INTERSECTS' temporal operator with datetime property
req \%>\%
 ext_filter(collection == "landsat-c2-l2" &&
            t_intersects(datetime,
            interval("1985-07-16T05:32:00Z", "1985-07-24T16:50:35Z"))) \%>\%
 post_request()

# 'T_DURING' temporal operator with datetime property
req \%>\%
 ext_filter(collection == "landsat-c2-l2" &&
            t_during(datetime,
            interval("2022-07-16T05:32:00Z", ".."))) \%>\%
 post_request()

# 'T_BEFORE' temporal operator with datetime property
req \%>\%
 ext_filter(collection == "landsat-c2-l2" &&
            t_before(datetime, timestamp("2022-07-16T05:32:00Z"))) \%>\%
 post_request()

# 'T_AFTER' temporal operator with datetime property
req \%>\%
 ext_filter(collection == "landsat-c2-l2" &&
            t_after(datetime, timestamp("2022-07-16T05:32:00Z"))) \%>\%
  post_request()
}
}
\seealso{
\code{\link[=ext_query]{ext_query()}}, \code{\link[=stac_search]{stac_search()}}, \code{\link[=post_request]{post_request()}},
\code{\link[=endpoint]{endpoint()}}, \code{\link[=before_request]{before_request()}},
\code{\link[=after_response]{after_response()}}, \code{\link[=content_response]{content_response()}}
}
